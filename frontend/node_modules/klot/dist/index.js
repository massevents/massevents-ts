'use strict';

var tslib_1 = require('tslib');

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var DEFAULT_KLOT_OPTIONS = {
  interpolationRegex: /{([\w]+)}/g,
  values: {}
};
function klotFactory(language, locales, globalOptions) {
  if (typeof language !== "string") {
    throw new Error("Language should be a string.");
  }

  if (_typeof(locales) !== "object") {
    throw new Error("Locales should be of object");
  }

  var factoryOptions = tslib_1.__assign({}, DEFAULT_KLOT_OPTIONS, globalOptions);

  var locale = locales[language];
  return function translate(input, localOptions) {
    var options = tslib_1.__assign({}, factoryOptions, localOptions);

    if (input && locale) {
      var translation_1 = locale[input];

      if (typeof translation_1 === "string") {
        return interpolate(translation_1, options);
      }

      if (_typeof(translation_1) === "object") {
        return function transform(fn) {
          return interpolate(fn(translation_1, options), options);
        };
      }

      return interpolate(input, options);
    }

    return "";
  };
}

function interpolate(text, options) {
  return text.replace(options.interpolationRegex, function (_, valueName) {
    return "" + (options.values[valueName] || "");
  });
}

module.exports = klotFactory;
