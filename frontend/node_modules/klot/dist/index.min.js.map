{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["\"use strict\";\n\nexport type KlotOptions = {\n  interpolationRegex?: RegExp;\n  values?: { [key: string]: string | number };\n};\n\nconst DEFAULT_KLOT_OPTIONS = {\n  interpolationRegex: /{([\\w]+)}/g,\n  values: {}\n};\n\nexport default function klotFactory<\n  Language extends keyof LocaleMap,\n  LocaleMap extends {\n    [key: string]: { [key: string]: string | { [key: string]: string } };\n  },\n  GlobalKlotOptions extends Partial<KlotOptions> = Partial<KlotOptions>\n>(language: Language, locales: LocaleMap, globalOptions?: GlobalKlotOptions) {\n  if (typeof language !== \"string\") {\n    throw new Error(\"Language should be a string.\");\n  }\n\n  if (typeof locales !== \"object\") {\n    throw new Error(\"Locales should be of object\");\n  }\n\n  const factoryOptions = {\n    ...DEFAULT_KLOT_OPTIONS,\n    ...globalOptions\n  };\n\n  const locale = locales[language];\n\n  return function translate<\n    Input extends keyof LocaleMap[Language] = string,\n    LocalKlotOptions extends Partial<KlotOptions> = KlotOptions\n  >(\n    input: Input & string,\n    localOptions?: LocalKlotOptions\n  ): LocaleMap[Language][Input] extends string\n    ? LocaleMap[Language][Input]\n    : LocaleMap[Language][Input] extends { [key: string]: string }\n    ? (\n        fn: (\n          transformableInput: LocaleMap[Language][Input],\n          klotOptions: GlobalKlotOptions & LocalKlotOptions\n        ) => LocaleMap[Language][Input][keyof LocaleMap[Language][Input]]\n      ) => LocaleMap[Language][Input][keyof LocaleMap[Language][Input]]\n    : Input extends string\n    ? Input\n    : \"\" {\n    const options = {\n      ...factoryOptions,\n      ...localOptions\n    };\n\n    if (input && locale) {\n      const translation = locale[input];\n\n      if (typeof translation === \"string\") {\n        return interpolate(translation, options) as any;\n      }\n\n      if (typeof translation === \"object\") {\n        return function transform(\n          fn: (\n            transformableInput: LocaleMap[Language][Input],\n            klotOptions: KlotOptions\n          ) => LocaleMap[Language][Input][keyof LocaleMap[Language][Input]] &\n            string\n        ) {\n          return interpolate(fn(translation, options), options);\n        } as any;\n      }\n\n      return interpolate(input, options) as any;\n    }\n\n    return \"\" as any;\n  };\n}\n\nfunction interpolate<\n  T extends string = string,\n  O extends Required<KlotOptions> = Required<KlotOptions>\n>(text: T, options: O) {\n  return text.replace(\n    options.interpolationRegex,\n    (_, valueName) => `${options.values[valueName] || \"\"}`\n  );\n}\n"],"names":["DEFAULT_KLOT_OPTIONS","interpolationRegex","values","klotFactory","language","locales","globalOptions","Error","_typeof","factoryOptions","locale","input","localOptions","options","translation_1","interpolate","fn","text","replace","_","valueName"],"mappings":"2RAOA,IAAMA,qBAAuB,CAC3BC,mBAAoB,aACpBC,OAAQ,IAGV,SAAwBC,YAMtBC,EAAoBC,EAAoBC,MAChB,iBAAbF,QACH,IAAIG,MAAM,mCAGK,WAAnBC,QAAOH,SACH,IAAIE,MAAM,mCAGZE,sBACDT,qBACAM,GAGCI,EAASL,EAAQD,UAEhB,SAILO,EACAC,OAaMC,sBACDJ,EACAG,MAGDD,GAASD,EAAQ,KACbI,EAAcJ,EAAOC,SAEA,iBAAhBG,EACFC,YAAYD,EAAaD,GAGP,WAAvBL,QAAOM,GACF,SACLE,UAMOD,YAAYC,EAAGF,EAAaD,GAAUA,IAI1CE,YAAYJ,EAAOE,SAGrB,IAIX,SAASE,YAGPE,EAASJ,UACFI,EAAKC,QACVL,EAAQZ,mBACR,SAACkB,EAAGC,SAAc,IAAGP,EAAQX,OAAOkB,IAAc"}