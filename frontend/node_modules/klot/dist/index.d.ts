export declare type KlotOptions = {
    interpolationRegex?: RegExp;
    values?: {
        [key: string]: string | number;
    };
};
export default function klotFactory<Language extends keyof LocaleMap, LocaleMap extends {
    [key: string]: {
        [key: string]: string | {
            [key: string]: string;
        };
    };
}, GlobalKlotOptions extends Partial<KlotOptions> = Partial<KlotOptions>>(language: Language, locales: LocaleMap, globalOptions?: GlobalKlotOptions): <Input extends keyof LocaleMap[Language] = string, LocalKlotOptions extends Partial<KlotOptions> = KlotOptions>(input: Input & string, localOptions?: LocalKlotOptions | undefined) => LocaleMap[Language][Input] extends string ? LocaleMap[Language][Input] : LocaleMap[Language][Input] extends {
    [key: string]: string;
} ? (fn: (transformableInput: LocaleMap[Language][Input], klotOptions: GlobalKlotOptions & LocalKlotOptions) => LocaleMap[Language][Input][keyof LocaleMap[Language][Input]]) => LocaleMap[Language][Input][keyof LocaleMap[Language][Input]] : Input extends string ? Input : "";
//# sourceMappingURL=index.d.ts.map