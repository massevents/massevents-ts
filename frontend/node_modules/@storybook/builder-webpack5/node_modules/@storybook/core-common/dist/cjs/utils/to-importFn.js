"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toImportFnPart = toImportFnPart;
exports.toImportFn = toImportFn;

var _tsDedent = _interopRequireDefault(require("ts-dedent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toImportFnPart(specifier) {
  var directory = specifier.directory,
      importPathMatcher = specifier.importPathMatcher; // It appears webpack passes *something* similar to the absolute path to the file
  // on disk (prefixed with something unknown) to the matcher.
  // We don't want to include the absolute path in our bundle, so we will just pull the
  // '^' and any leading '.' off the regexp and match on that.
  // It's imperfect as it could match extra things in extremely unusual cases, but it'll do for now.

  var webpackIncludeRegex = new RegExp(importPathMatcher.source.replace(/^\^\\\.*/, ''));
  return (0, _tsDedent.default)`
      async (path) => {
        if (!${importPathMatcher}.exec(path)) {
          return;
        }

        const pathRemainder = path.substring(${directory.length + 1});
        return import(
          /* webpackInclude: ${webpackIncludeRegex} */
          '${directory}/' + pathRemainder
        );
      }

  `;
}

function toImportFn(stories) {
  return (0, _tsDedent.default)`
    const importers = [
      ${stories.map(toImportFnPart).join(',\n')}
    ];

    export async function importFn(path) {
      for (let i = 0; i < importers.length; i++) {
        const moduleExports = await importers[i](path);
        if (moduleExports) {
          return moduleExports;
        }
      }
    }
  `;
}