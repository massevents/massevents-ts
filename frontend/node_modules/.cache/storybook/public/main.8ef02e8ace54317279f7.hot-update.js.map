{"version":3,"file":"main.8ef02e8ace54317279f7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAaA;AACA;AAAA;AAAA;AAAA;;AAEA;;AASA;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAIA;AACA","sources":["webpack://default/./components/atoms/Button/Component.tsx"],"sourcesContent":["import clsx from 'clsx'\nimport React from 'react'\nimport style from './styles.module.css'\nimport InternalOrExternalLink from '@lib/link/Component'\nimport { Enum_Componentatomsbutton_Buttontype } from '@generated/graphql-request'\n\ninterface ButtonProps {\n  disabled?: boolean\n  children: React.ReactNode\n  color?: Enum_Componentatomsbutton_Buttontype\n}\n\ntype Props =\n| ({ as: 'link' } & ButtonProps & React.AnchorHTMLAttributes<HTMLAnchorElement>)\n| ({ as: 'button' } & ButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>)\n\nexport function Button (props: Props): JSX.Element {\n  const { color = 'pink', children, ...componentProps } = props\n\n  const classes = clsx(\n    componentProps.className,\n    style.button,\n    color === 'pink' && style.buttonPrimary,\n    color === 'gradient' && style.buttonGradient,\n    color === 'textGradient' && style.buttonTextGradient,\n    color === 'blank' && style.buttonBlank\n  )\n\n  if (componentProps.as === 'link') {\n    const { as, className, ...linkProps } = componentProps\n    return (\n      <InternalOrExternalLink className={classes} {...linkProps}>\n        {color === 'textGradient' ? (<span>{children}</span>) : children}\n      </InternalOrExternalLink>\n    )\n  } else {\n    const { as, className, ...buttonProps } = componentProps\n    return (\n      <button className={classes} {...buttonProps}>\n        {color === 'textGradient' ? (<span>{children}</span>) : children}\n      </button>\n    )\n  }\n}\n"],"names":[],"sourceRoot":""}