{"version":3,"file":"main.cf19af06a2a2d776fcec.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAOA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AAAA;AACA;AAAA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAZA;AARA;AA0BA;AA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAGA;AACA;;;AAGA;AAAA;;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAIA;AAAA;AAEA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAXA;AAgBA;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AARA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AANA;AAlBA;AADA;AAkCA;AApCA","sources":["webpack://default/./components/molecules/CaseLarge/Component.tsx","webpack://default/./components/organisms/ProjectSelection/Component.tsx","webpack://default/./components/organisms/VisionBlock/Component.tsx"],"sourcesContent":["import React from 'react'\nimport style from './styles.module.css'\nimport clsx from 'clsx'\nimport Image from 'next/image'\nimport { InlineLink } from '@components/atoms/InlineLink/Component'\nimport { Case } from '@generated/graphql-request'\nimport ReactMarkdown from 'react-markdown'\nimport { getWebsiteApiOrigin } from '@misc/environments'\n\ninterface Props {\n  isReversed?: boolean\n  color?: string\n}\n\nexport default function CaseLarge (props: Props & Case): JSX.Element {\n  return (\n    <div className={clsx(style.grid, style.caseLarge)}>\n      <div className={clsx(style.contentCol, props.isReversed && style.isReversed)}>\n        <h2>{props.teaserTitle}<span className='span-pink'>.</span></h2>\n        <h6>{props.teaserSubtitle}</h6>\n        <ReactMarkdown>{props.teaserDescription ?? ''}</ReactMarkdown>\n        <InlineLink as='link'>{props.teaserButtonLabel}</InlineLink>\n      </div>\n\n      <div className={clsx(style.imageCol, props.isReversed && style.isReversed)}>\n        <div className={clsx(\n          style.bgBlock,\n          props.color === 'blue' && style.bgBlockBlue,\n          props.color === 'pink' && style.bgBlockPink,\n          props.color === 'orange' && style.bgBlockOrange,\n          props.color === 'red' && style.bgBlockRed,\n          props.color === 'green' && style.bgBlockGreen,\n          props.color === 'purple' && style.bgBlockPurple,\n          props.color === 'lavender' && style.bgBlockLavender\n        )}\n        />\n        <div className={style.imageWrapper}>\n          <Image src={`${getWebsiteApiOrigin()}${props.teaserImage?.data?.attributes?.url ?? ''}`} alt={props.teaserImage?.data?.attributes?.caption ?? ''} layout='fill' objectFit='cover' objectPosition='center center' />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport gridStyle from '@components/atoms/Grid/styles.module.css'\nimport style from './styles.module.css'\nimport clsx from 'clsx'\nimport Image from 'next/image'\nimport { getWebsiteApiOrigin } from '@misc/environments'\nimport { Link } from '@components/atoms/Link/Component'\nimport CaseLarge from '@components/molecules/CaseLarge/Component'\nimport { ComponentBuildingBlockProjectSelection } from '@generated/graphql-request'\n\nexport default function ProjectSelection (props: ComponentBuildingBlockProjectSelection): JSX.Element {\n  const cases = props.cases?.data ?? []\n\n  return (\n    <div className={clsx(gridStyle.grid, style.projectSelection)}>\n      <div className={style.titleBar}>\n        <h3>{props.title}</h3>\n      </div>\n\n      <div className={style.content}>\n        {cases.map((item, idx): JSX.Element => {\n          return (<CaseLarge {...item.attributes} isReversed={idx % 2 !== 0} />)\n        })}\n      </div>\n\n      <div className={style.buttonBar}>\n        <Link as='link' href={props.link?.path}>{props.link?.label}</Link>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport gridStyle from '@components/atoms/Grid/styles.module.css'\nimport style from './styles.module.css'\nimport clsx from 'clsx'\nimport { ComponentBuildingBlockVisionBlock } from '@generated/graphql-request'\nimport Image from 'next/image'\nimport { getWebsiteApiOrigin } from '@misc/environments'\nimport ReactMarkdown from 'react-markdown'\nimport { Link } from '@components/atoms/Link/Component'\n\nexport default function VisionBlock (props: ComponentBuildingBlockVisionBlock): JSX.Element {\n  return (\n    <div className={clsx(gridStyle.grid, style.visionBlock)}>\n      <div className={style.grid}>\n        <div className={clsx(\n          style.bgBlock,\n          props.color === 'pink' && style.bgBlockPink,\n          props.color === 'green' && style.bgBlockGreen,\n          props.color === 'red' && style.bgBlockRed,\n          props.color === 'blue' && style.bgBlockBlue\n        )}\n        >\n          <div className={style.bgBlockWrapper} />\n        </div>\n        <div className={style.leftCol}>\n          <h3>{props.title}</h3>\n          <h6>{props.subtitle}</h6>\n          <ReactMarkdown>{props.description}</ReactMarkdown>\n\n          <Link as='link' href='/'>Ha</Link>\n        </div>\n        <div className={style.rightCol}>\n          <div className={style.rightTopPhoto}>\n            <div className={style.rightTopPhotoWrapper}>\n              <Image src={`${getWebsiteApiOrigin()}${props.photoTop?.data?.attributes?.url ?? ''}`} alt={props.photoTop?.data?.attributes?.caption ?? ''} layout='fill' objectFit='cover' objectPosition='center center' />\n            </div>\n          </div>\n          <div className={style.rightBottomPhoto}>\n            <div className={style.rightBottomPhotoWrapper}>\n              <Image src={`${getWebsiteApiOrigin()}${props.photoBottom?.data?.attributes?.url ?? ''}`} alt={props.photoBottom?.data?.attributes?.caption ?? ''} layout='fill' objectFit='cover' objectPosition='center center' />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"sourceRoot":""}